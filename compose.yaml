services:
  # TimescaleDB Database Service
  timescaledb:
    build:
      context: ./timescaledb-stack
      dockerfile: Dockerfile
    container_name: timescaledb_container
    restart: unless-stopped
    environment:
      POSTGRES_DB: eo_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./timescaledb-stack/db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - eo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d eo_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # FastAPI Backend Service
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_container
    restart: unless-stopped
    environment:
      # Database Configuration
      EO_CD_DB_HOST: timescaledb
      EO_CD_DB_PORT: 5432
      EO_CD_DB_NAME: eo_db
      EO_CD_DB_USER: postgres
      EO_CD_DB_PASSWORD: password

      # Logfire Configuration (override with .env file)
      EO_CD_LOGFIRE_PROJECT_NAME: eo-cd-slo-docker
      EO_CD_LOGFIRE_ENVIRONMENT: docker
      EO_CD_ENABLE_LOGFIRE: "true"
      EO_CD_LOG_LEVEL: INFO

      # API Configuration
      EO_CD_API_TITLE: "Sentinel-2 Image API (Docker)"
      EO_CD_API_VERSION: "1.0.0"
    env_file:
      - ./backend/.env # Optional: override with local .env file
    ports:
      - "8000:8000"
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - eo_network
    volumes:
      # Optional: Mount for development (comment out for production)
      - ./backend:/app
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]

  # EO Pipeline Service
  eo-pipeline:
    build:
      context: ./cluster
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: eo_pipeline_container
    restart: unless-stopped
    environment:
      # Pipeline Configuration
      PIPELINE_MODE: database_only # local_only, database_only, hybrid
      MAX_WORKERS: 4
      MEMORY_LIMIT_GB: 4

      # Data processing
      DATA_DIR: /app/data

      # BTC Model Configuration
      BTC_MODEL_CHECKPOINT: blaz-r/BTC-B_oscd96
      BTC_THRESHOLD: 0.2

      # Monitoring
      MONITORING_PORT: 8080
      LOG_LEVEL: DEBUG

      # Database Configuration (for database mode)
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: eo_db
      DB_USER: postgres
      DB_PASSWORD: password

      # CUDA Configuration (uncomment for GPU support)
      # CUDA_VISIBLE_DEVICES: all
    ports:
      - "8080:8080" # Monitoring dashboard
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - eo_network
    volumes:
      # Mount data directory for pipeline outputs
      - ./data:/app/data
      # Optional: Mount for development (comment out for production)
      # - ./cluster:/app
    # Uncomment for GPU support:
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all

networks:
  eo_network:
    driver: bridge

volumes:
  timescale_data:
